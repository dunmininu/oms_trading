services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oms_postgres
    environment:
      POSTGRES_DB: oms_trading_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d oms_trading_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - oms_network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: oms_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - oms_network

  # Interactive Brokers Gateway (Simulation)
  ib-gateway:
    image: ghcr.io/gnzsnz/ib-gateway:latest
    platform: linux/amd64
    container_name: oms_ib_gateway
    environment:
      TWS_USERID: ${IB_USERNAME:-edemo}
      TWS_PASSWORD: ${IB_PASSWORD:-demouser}
      TRADING_MODE: paper
      VNC_SERVER_PASSWORD: ${VNC_PASSWORD:-oms123}
      TWS_ACCEPT_INCOMING: true
      TWS_PORT: 4001
      TWS_API_PORT: 7497
    ports:
      - "7497:7497"  # IB API port
      - "4001:4001"  # TWS port
      - "5900:5900"  # VNC port for GUI access
    volumes:
      - ib_data:/root/Jts
    restart: unless-stopped
    networks:
      - oms_network
    healthcheck:
      test: ["CMD", "netstat", "-an", "|", "grep", "7497"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oms_web
    environment:
      DJANGO_SETTINGS_MODULE: apps.core.settings.dev
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/oms_trading_dev
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-me}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key}
      API_KEY_SECRET: ${API_KEY_SECRET:-dev-api-key-secret}
      IB_HOST: ib-gateway
      IB_PORT: 7497
      IB_CLIENT_ID: 1
      IB_ACCOUNT: ${IB_ACCOUNT:-DU123456}
      DEBUG: "true"
      LOAD_INITIAL_DATA: "true"
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL:-admin@omstrading.com}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD:-admin123}
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - oms_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oms_celery_worker
    command: celery -A apps.core worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    environment:
      DJANGO_SETTINGS_MODULE: apps.core.settings.dev
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/oms_trading_dev
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-me}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key}
      API_KEY_SECRET: ${API_KEY_SECRET:-dev-api-key-secret}
      IB_HOST: ib-gateway
      IB_PORT: 7497
      IB_CLIENT_ID: 2
      IB_ACCOUNT: ${IB_ACCOUNT:-DU123456}
      C_FORCE_ROOT: "true"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - oms_network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oms_celery_beat
    command: celery -A apps.core beat --loglevel=info --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DJANGO_SETTINGS_MODULE: apps.core.settings.dev
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/oms_trading_dev
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-me}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key}
      API_KEY_SECRET: ${API_KEY_SECRET:-dev-api-key-secret}
      IB_HOST: ib-gateway
      IB_PORT: 7497
      IB_CLIENT_ID: 3
      C_FORCE_ROOT: "true"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - oms_network

  # Flower - Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oms_flower
    command: celery -A apps.core flower --port=5555 --broker=redis://redis:6379/1
    environment:
      DJANGO_SETTINGS_MODULE: apps.core.settings.dev
      CELERY_BROKER_URL: redis://redis:6379/1
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower123}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - oms_network

  # Nginx Load Balancer (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: oms_nginx
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticfiles:/staticfiles:ro
      - ./media:/media:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - oms_network
    profiles:
      - production

  # Prometheus Metrics (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: oms_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - oms_network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional - for monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: oms_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - oms_network
    profiles:
      - monitoring

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ib_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom Network
networks:
  oms_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
