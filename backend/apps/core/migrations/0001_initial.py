# Generated by Django 5.0.14 on 2025-08-10 13:43

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("profile_picture", models.URLField(blank=True)),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                ("language", models.CharField(default="en", max_length=10)),
                ("last_password_change", models.DateTimeField(blank=True, null=True)),
                ("failed_login_attempts", models.PositiveIntegerField(default=0)),
                ("locked_until", models.DateTimeField(blank=True, null=True)),
                ("email_verified", models.BooleanField(default=False)),
                (
                    "email_verification_token",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "email_verification_expires",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "password_reset_token",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("password_reset_expires", models.DateTimeField(blank=True, null=True)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("two_factor_secret", models.CharField(blank=True, max_length=32)),
                ("last_activity", models.DateTimeField(blank=True, null=True)),
                (
                    "last_ip_address",
                    models.GenericIPAddressField(blank=True, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "core_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("CREATE", "Create"),
                            ("UPDATE", "Update"),
                            ("DELETE", "Delete"),
                            ("LOGIN", "Login"),
                            ("LOGOUT", "Logout"),
                            ("API_CALL", "API Call"),
                            ("ORDER_PLACE", "Order Place"),
                            ("ORDER_CANCEL", "Order Cancel"),
                            ("ORDER_MODIFY", "Order Modify"),
                            ("EXECUTION", "Execution"),
                            ("POSITION_CHANGE", "Position Change"),
                            ("RISK_CHECK", "Risk Check"),
                            ("STRATEGY_START", "Strategy Start"),
                            ("STRATEGY_STOP", "Strategy Stop"),
                            ("BROKER_CONNECT", "Broker Connect"),
                            ("BROKER_DISCONNECT", "Broker Disconnect"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                ("resource_type", models.CharField(db_index=True, max_length=100)),
                ("resource_id", models.CharField(db_index=True, max_length=100)),
                ("old_values", models.JSONField(blank=True, null=True)),
                ("new_values", models.JSONField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("request_id", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(blank=True, null=True)),
                ("tenant_id", models.UUIDField(blank=True, null=True, db_index=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "audit log",
                "verbose_name_plural": "audit logs",
                "db_table": "core_audit_log",
            },
        ),
        migrations.CreateModel(
            name="HealthCheck",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "component",
                    models.CharField(
                        choices=[
                            ("DATABASE", "Database"),
                            ("REDIS", "Redis"),
                            ("CELERY", "Celery"),
                            ("IB_CONNECTOR", "IB Connector"),
                            ("MARKET_DATA", "Market Data"),
                            ("RISK_ENGINE", "Risk Engine"),
                            ("ORDER_ROUTER", "Order Router"),
                            ("WEBHOOK_SENDER", "Webhook Sender"),
                        ],
                        db_index=True,
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Success"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                ("response_time_ms", models.IntegerField(blank=True, null=True)),
                ("details", models.JSONField(blank=True, null=True)),
                ("error_traceback", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "health check",
                "verbose_name_plural": "health checks",
                "db_table": "core_health_check",
                "indexes": [
                    models.Index(
                        fields=["component", "status"],
                        name="core_health_compone_bfdeeb_idx",
                    ),
                    models.Index(
                        fields=["component", "created_at"],
                        name="core_health_compone_402c0b_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="core_health_status_543e9c_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SystemConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("key", models.CharField(db_index=True, max_length=100, unique=True)),
                ("value", models.JSONField()),
                ("description", models.TextField(blank=True)),
                (
                    "category",
                    models.CharField(db_index=True, default="general", max_length=50),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this config is visible to all users",
                    ),
                ),
            ],
            options={
                "verbose_name": "system configuration",
                "verbose_name_plural": "system configurations",
                "db_table": "core_system_configuration",
                "indexes": [
                    models.Index(fields=["key"], name="core_system_key_4851ab_idx"),
                    models.Index(
                        fields=["category"], name="core_system_categor_7d9a56_idx"
                    ),
                    models.Index(
                        fields=["is_public"], name="core_system_is_publ_cb7cd2_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="core_user_email_38052c_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_active"], name="core_user_is_acti_8c954f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["created_at"], name="core_user_created_bd650f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["tenant_id", "action"], name="core_audit__tenant__cc8a5d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["tenant_id", "resource_type"],
                name="core_audit__tenant__d11e73_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["tenant_id", "created_at"], name="core_audit__tenant__ee22ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "created_at"], name="core_audit__user_id_d9fe0d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["action", "created_at"], name="core_audit__action_5c03c3_idx"
            ),
        ),
    ]
